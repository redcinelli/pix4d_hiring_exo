[{"/home/uncoolshogun/Documents/perso/pro/recrutement-2020/pix4d/exo1/frontend/src/index.js":"1","/home/uncoolshogun/Documents/perso/pro/recrutement-2020/pix4d/exo1/frontend/src/reportWebVitals.js":"2"},{"size":3689,"mtime":1610016038583,"results":"3","hashOfConfig":"4"},{"size":362,"mtime":1609966587544,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"1cjs5pz",{"filePath":"9","messages":"10","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/uncoolshogun/Documents/perso/pro/recrutement-2020/pix4d/exo1/frontend/src/index.js",["11"],"import './index.css';\n\nimport React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ReactDataGrid from \"react-data-grid\";\n\n\nconst url = 'http://localhost:8000/drones/'\n\nasync function getDronesData(){\n\n  let response = await fetch(url);\n\n  let drones = await response.json();\n\n  return drones.map(drone =>{\n    return {\n      id: drone.id,\n      name: drone.name,\n      brand: drone.brand,\n      camerabrand: drone.camera.brand,\n      cameramodel: drone.camera.model,\n      resolution: drone.camera.resolution,\n      checkin: drone.check_in,\n      serialnumber: drone.serial_number\n    }\n  });\n}\n\nasync function addDrones(){\n  let data = {\n    name: document.getElementById(\"name\").value,\n    brand: document.getElementById(\"brand\").value,\n    serial_number: document.getElementById(\"serial\").value,\n    camera: {\n      model: document.getElementById(\"cameramodel\").value,\n      resolution: document.getElementById(\"cameraresolution\").value,\n      brand: document.getElementById(\"camerabrand\").value\n    }\n  }\n  var myHeaders = new Headers();\n  myHeaders.append(\"x-fakeauth-x\", document.getElementById(\"writeaccess\").checked ? 0:1 );\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  \n  var raw = JSON.stringify(data)\n\n  var requestOptions = {\n    method: 'POST',\n    headers: myHeaders,\n    body: raw,\n    redirect: 'follow'\n  };\n  \n  await fetch(url, requestOptions)\n}\n\nconst defaultColumnProperties = {\n  sortable: true,\n  width: 120\n};\n\nconst columns = [\n  {\n    key: \"id\",\n    name: \"ID\",\n    sortDescendingFirst: true\n  },\n  {\n    key: \"name\",\n    name: \"Name\"\n  },\n  {\n    key: \"brand\",\n    name: \"Brand\"\n  },\n  {\n    key: \"camerabrand\",\n    name: \"Camera Brand\"\n  },\n  {\n    key: \"cameramodel\",\n    name: \"Camera Model\"\n  },\n  {\n    key: \"resolution\",\n    name: \"Resolution\"\n  },\n  {\n    key: \"checkin\",\n    name: \"Check In\"\n  },\n  {\n    key: \"serialnumber\",\n    name: \"Serial Number\"\n  }\n].map(c => ({ ...c, ...defaultColumnProperties }));\n\n\nconst sortRows = (initialRows, sortColumn, sortDirection) => rows => {\n  const comparer = (a, b) => {\n    if (sortDirection === \"ASC\") {\n      return a[sortColumn] > b[sortColumn] ? 1 : -1;\n    } else if (sortDirection === \"DESC\") {\n      return a[sortColumn] < b[sortColumn] ? 1 : -1;\n    }\n  };\n  return sortDirection === \"NONE\" ? initialRows : [...rows].sort(comparer);\n};\n\nfunction Example() {\n  const [rows, setRows] = useState([]);\n\n  useEffect(async () => {\n    let x = await getDronesData()\n    setRows(x)\n  }, []);\n\n  const wrapper = async () => {\n    await addDrones()\n    let x = await getDronesData()\n    setRows(x)\n  }\n\n  return (\n    <div>\n      <form id=\"form\">\n        <input id=\"name\" placeholder=\"name\" type=\"text\"></input>\n        <input id=\"brand\" placeholder=\"brand\" type=\"text\"></input>\n        <input id=\"camerabrand\" placeholder=\"optical's brand\" type=\"text\"></input>\n        <input id=\"cameramodel\" placeholder=\"optical's model\" type=\"text\"></input>\n        <input id=\"cameraresolution\" placeholder=\"resolution\" type=\"text\"></input>\n        <input id=\"serial\" placeholder=\"serial\" type=\"text\"></input>\n        <label>Write access: </label>\n        <input id=\"writeaccess\" type=\"checkbox\"></input>\n        <button onClick={(e) => {e.preventDefault(); wrapper()} }>Save</button>\n      </form>\n      <ReactDataGrid\n        columns={columns}\n        rowGetter={i => rows[i]}\n        rowsCount={rows.length}\n        minHeight={500}\n        onGridSort={(sortColumn, sortDirection) =>\n          setRows(sortRows(rows, sortColumn, sortDirection))\n        }\n      />\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Example />, rootElement);\n","/home/uncoolshogun/Documents/perso/pro/recrutement-2020/pix4d/exo1/frontend/src/reportWebVitals.js",[],{"ruleId":"12","severity":1,"message":"13","line":113,"column":13,"nodeType":"14","endLine":116,"endColumn":4},"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression"]